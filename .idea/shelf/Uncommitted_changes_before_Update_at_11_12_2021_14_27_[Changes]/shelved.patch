Index: backt_code/test_file.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pandas as pd\r\nimport yfinance as yf\r\nimport numpy as np\r\nimport plotly.graph_objects as go\r\nimport plotly.subplots as sp\r\nimport plotly.express as px\r\nfrom datetime import datetime, timedelta\r\n\r\n\r\n\r\nclass backtest:\r\n    \"\"\" :Parameters:\r\n\r\n            comp: str or list\r\n                Companies taken into the consideration for the backtest.\r\n            o_day: list of str or timestamps\r\n                Day/Days of the position opening.\r\n            c_day: list of str or timestamps\r\n                Day/Days of the position closing.\r\n            weights_factor: int or float or array-like default None\r\n                Optional list of factors which will be considered to define the weights for taken companies. By default\r\n                all weights are distributed equally, however if the list of factors provided the backtest will maximize\r\n                the weights towards the one with max weight factor. Negative weight factor will be considered as short selling.\r\n            take_profit: float or int default None\r\n                List of values determining the level till a particular stock shall be traded.\r\n            stop_loss: float or int default None\r\n                List of values determining the level till a particular stock shall be traded.\r\n            \"\"\"\r\n    def __init__(self, comp, o_day, c_day, weights_factor= None , take_profit=None, stop_loss=None):\r\n        self.comp = comp\r\n        self.b_day = o_day\r\n        self.s_day = c_day\r\n        self.w_factor = weights_factor if weights_factor is not None else np.ones(len(comp))\r\n        self.tp = take_profit if take_profit is not None else 100 * np.ones(len(comp))\r\n        self.sl = stop_loss if stop_loss is not None else np.zeros(len(comp))\r\n\r\n    def company_list(self):\r\n        \"\"\"\r\n        :return:\r\n            DataFrame with all input data.\r\n        \"\"\"\r\n        df = pd.DataFrame({\"company\": self.comp,\"start day\": self.b_day,\"end day\": self.s_day,\"weights factor\": self.w_factor,\r\n                           \"take profit\": self.tp,\"stop loss\": self.sl})\r\n        df = df.set_index(df['company'])\r\n        for x in df.index:\r\n            if df.loc[x, \"weights factor\"] < 0:\r\n                a = df.loc[x, \"stop loss\"]\r\n                b = df.loc[x, \"take profit\"]\r\n                df.loc[x,\"take profit\"] = (1-a) + 1\r\n                df.loc[x,\"stop loss\"] = 1 - (b-1)\r\n        self.company_list = df\r\n\r\n# FOR DETAILED VIEW Adding one day to first buy and last sell dates\r\n    def date_plus_one (self, d):\r\n        str_date = d\r\n        if type(str_date)== str:\r\n            date = datetime.strptime(str_date, \"%Y-%m-%d\")\r\n            modified_date = date + timedelta(days=1)\r\n            back_to_str = datetime.strftime(modified_date, \"%Y-%m-%d\")\r\n        else:\r\n            modified_date = str_date + timedelta(days=1)\r\n            back_to_str = datetime.strftime(modified_date, \"%Y-%m-%d\")\r\n            return back_to_str\r\n\r\n    def consolidated_table_detailed(self):\r\n        backtest.company_list(self)\r\n        df_1 = self.company_list\r\n        initial_df = pd.DataFrame()\r\n\r\n        for com, b_d, s_d in zip(df_1[\"company\"], df_1[\"start day\"], df_1[\"end day\"]):\r\n            data = yf.download(com, start=backtest.date_plus_one(self, b_d), end=backtest.date_plus_one(self, s_d))\r\n            data[\"Ticker\"] = com\r\n            initial_df = pd.concat([initial_df, data])\r\n        df_close = initial_df[[\"Ticker\", \"Adj Close\"]]\r\n        df_close.columns = ['ticker', 'close_price']\r\n        df_open = initial_df[[\"Ticker\", \"Open\"]]\r\n        df_open.columns = ['ticker', 'open']\r\n        open_price = df_open.groupby('ticker').first()\r\n        em1 = pd.DataFrame()\r\n        em2 =pd.DataFrame()\r\n        for x in open_price.index:\r\n            get_open = open_price.loc[x]\r\n            get_end = df_close[df_close['ticker']==x]\r\n            fake_df = pd.DataFrame(index=get_end.index, columns=['ticker', 'close_price'])\r\n            fake_df = pd.DataFrame(fake_df.iloc[0]).T\r\n            fake_df.iloc[0, 0] = x\r\n            fake_df.iloc[0, 1] = get_open.values[0]\r\n            merged_df = fake_df.append(get_end)\r\n            merged_df['daily_change']=merged_df['close_price'].pct_change()\r\n            merged_df = merged_df.iloc[1:]\r\n            aux_df = merged_df[['ticker', 'close_price']]\r\n            work_df = merged_df[['ticker', 'daily_change']]\r\n            em1 = em1.append(aux_df)\r\n            em2 = em2.append(work_df)\r\n        dc = em2.pivot_table(index=em2.index, columns='ticker', values='daily_change')\r\n        dc = dc[self.comp]\r\n        dc = dc.replace([np.inf, -np.inf], np.nan)\r\n        dc = dc.fillna(0)\r\n        dc = dc.apply(pd.to_numeric)\r\n        aux = em1.pivot_table(index=em2.index, columns='ticker', values='close_price')\r\n        aux = aux[self.comp]\r\n        aux = aux.replace([np.inf, -np.inf], np.nan)\r\n        aux = aux.fillna(0)\r\n        aux = aux.apply(pd.to_numeric)\r\n        self.auxiliar_df = aux\r\n        self.detailed_return = dc\r\n\r\n        return self.detailed_return\r\n\r\n\r\n    def portfolio_construction(self):\r\n        \"\"\"\r\n        :return:\r\n            Full constructed portfolio, including position length, weights factor, stop loss & take profit.\r\n        \"\"\"\r\n        backtest.consolidated_table_detailed(self)\r\n        binary_weights = self.auxiliar_df / self.auxiliar_df\r\n        binary_weights.fillna(value=0, inplace=True)\r\n        fac_summing = np.sum(abs(np.array(self.w_factor)))\r\n        dist = np.array(self.w_factor) / fac_summing\r\n        dist_df = pd.DataFrame(index= self.comp, data = self.w_factor).T\r\n        weights_df = binary_weights * dist\r\n        for z in weights_df.index:\r\n            if abs(weights_df.loc[z]).sum()!=1:\r\n                act = weights_df.loc[z][weights_df.loc[z]!=0]\r\n                act_df = dist_df[act.index]\r\n                new_dist =np.array(act_df)/np.sum(abs(np.array(act_df)))\r\n                new_dist_frame = pd.DataFrame(columns = act.index, data = new_dist).T\r\n                for i in new_dist_frame.index:\r\n                    weights_df.loc[z,i] =float(new_dist_frame.loc[i].values)\r\n        accu = (self.detailed_return + 1).cumprod()\r\n        for x in accu.columns:\r\n            q1 = accu[x]\r\n            for y in q1:\r\n                if y> self.company_list.loc[x, 'take profit']:\r\n                    q1.iloc[q1.values.tolist().index(y)+1:] =0\r\n                if y< self.company_list.loc[x, 'stop loss']:\r\n                    q1.iloc[q1.values.tolist().index(y) + 1:] = 0\r\n        aux_table_2 = accu* binary_weights\r\n        new_binary_weights = aux_table_2/aux_table_2\r\n        new_binary_weights.fillna(value=0, inplace=True)\r\n        weights_df = new_binary_weights * dist\r\n        for z in weights_df.index:\r\n            if abs(weights_df.loc[z]).sum() != 1:\r\n                act = weights_df.loc[z][weights_df.loc[z] != 0]\r\n                act_df = dist_df[act.index]\r\n                new_dist = np.array(act_df) / np.sum(abs(np.array(act_df)))\r\n                new_dist_frame = pd.DataFrame(columns=act.index, data=new_dist).T\r\n                for i in new_dist_frame.index:\r\n                    weights_df.loc[z, i] = float(new_dist_frame.loc[i].values)\r\n        port_performance = weights_df * self.detailed_return\r\n        port_performance['Sum'] = port_performance.sum(axis=1)\r\n        port_performance['Sum'] = port_performance['Sum'] + 1\r\n        port_performance['Accumulation'] = port_performance['Sum'].cumprod()\r\n\r\n        self.final_portfolio = port_performance\r\n\r\n        return self.final_portfolio\r\n\r\n    def plotting(self):\r\n        \"\"\"\r\n        :return:\r\n            Graphical repsresentaion of portfolio performance over given period.\r\n        \"\"\"\r\n        df = backtest.portfolio_construction(self)\r\n        # Monthly prod\r\n        mon = []\r\n        for x in self.final_portfolio.index:\r\n            mon.append(x.strftime(\"%Y-%m\"))\r\n        months = set(mon)\r\n        d = []\r\n        v = []\r\n        for x in months:\r\n            n = self.final_portfolio.loc[x, 'Sum'].prod()\r\n            d.append(x)\r\n            v.append(n)\r\n        com_frame = pd.DataFrame(index=d, data=v)\r\n        com_frame = com_frame.sort_index()\r\n        com_frame.index = pd.to_datetime(com_frame.index)\r\n        #Need only to plot com_frame\r\n\r\n        df = df.round(decimals=3)\r\n        port_performance_drawdown = self.final_portfolio.copy()\r\n        port_performance_drawdown = port_performance_drawdown.clip(upper=0)\r\n        port_performance_drawdown = port_performance_drawdown.drop(columns = ['Sum', 'Accumulation'])\r\n        port_performance_drawdown['Sum'] = port_performance_drawdown.sum(axis=1)\r\n        port_performance_drawdown['Sum'] = port_performance_drawdown['Sum'] + 1\r\n        port_performance_drawdown['Accumulation'] = port_performance_drawdown['Sum'].cumprod()\r\n        self.drawdown = port_performance_drawdown\r\n        df_drawdown = self.drawdown\r\n        df_drawdown = df_drawdown.round(decimals=3)\r\n        # Create figures in Express\r\n        fig1 = px.line(df, x=df.index, y=df[\"Accumulation\"],\r\n                       hover_data=df.columns[:-2]) #show all columns values excluding last 2\r\n        fig2 = px.line(df_drawdown, x=df_drawdown.index, y=df_drawdown[\"Accumulation\"],\r\n                       hover_data=df_drawdown.columns[:-2])  # show all columns values excluding last 2\r\n        # For as many traces that exist per Express figure, get the traces from each plot and store them in an array.\r\n        # This is essentially breaking down the Express fig1 into it's traces\r\n        figure1_traces = []\r\n        figure2_traces = []\r\n        for trace in range(len(fig1[\"data\"])):\r\n            figure1_traces.append(fig1[\"data\"][trace])\r\n        for trace in range(len(fig2[\"data\"])):\r\n            figure2_traces.append(fig2[\"data\"][trace])\r\n        # Create a 1x2 subplot\r\n        this_figure = sp.make_subplots(rows=2, cols=1)\r\n        for traces in figure1_traces:\r\n            this_figure.append_trace(traces, row=1, col=1)\r\n        for traces in figure2_traces:\r\n            this_figure.append_trace(traces, row=2, col=1)\r\n        this_figure.update_layout(hovermode='x')\r\n        this_figure.show()\r\n\r\n    def general_statistic(self):\r\n        backtest.portfolio_construction(self)\r\n        obj = self.final_portfolio\r\n        pdr = obj['Sum'] -1\r\n        self.port_mean = pdr.mean()\r\n        self.port_mean_pct = self.port_mean * 100\r\n        self.port_std = pdr.std()\r\n        self.LPM_0 = len(pdr[pdr<0])/len(pdr)\r\n        self.LPM_1 = pdr.clip(upper=0).mean()\r\n        self.LPM_2 = pdr.clip(upper=0).std()\r\n        topless_pdr = pdr[pdr<self.port_std]\r\n        botless_prd = topless_pdr[topless_pdr>-self.port_std]\r\n        self.inner_mean = botless_prd.mean()\r\n        obj_only_stocks =obj.drop(columns=['Sum', 'Accumulation'])\r\n        self.stocks_mean = obj_only_stocks.mean()\r\n        self.top_per = self.stocks_mean.nlargest(1)\r\n        self.worst_per = self.stocks_mean.nsmallest(1)\r\n        self.trade_length = len(pdr)\r\n        VaR_95 = -1.65 * self.port_std * np.sqrt(self.trade_length)\r\n        VaR_99 = -2.33 * self.port_std * np.sqrt(self.trade_length)\r\n        CVaR = self.LPM_1/self.LPM_0\r\n        print(f'Portfolio daily average return is {round(self.port_mean,2)}.')\r\n        print(f'Portfolio standard deviation is {round(self.port_std, 2)}.')\r\n        print(f'Daily average return for approximately 90% population is {round(self.inner_mean,2)}.')\r\n        print(f'Downside daily probability is {round(self.LPM_0,2)}.')\r\n        print(f'There is 95% confidence that you will not lose more than {round(100*VaR_95,2)} % of your portfolio in a given {self.trade_length} period.')\r\n        print(f'There is 99% confidence that you will not lose more than {round(100*VaR_99,2)} % of your portfolio in a given {self.trade_length} period.')\r\n        print(f'Expected loss that occur beyond the shortfall is {round(CVaR,4)}.')\r\n\r\n    def puzzle_assembly(self, dic):\r\n        \"\"\"\r\n        :param dic:\r\n            dic: aggregated dictionary containing several constructed portfolios\r\n        :return:\r\n            Combines several backtests results into one graphical presentation.\r\n        \"\"\"\r\n        names = dic.keys()\r\n        empty_frame = pd.DataFrame()\r\n        for x in names:\r\n            q1 = dic[x][dic[x].columns[:-2]]\r\n            empty_frame = empty_frame.append(q1)\r\n        empty_frame = empty_frame.sort_index(ascending=True)\r\n        empty_frame['Sum'] = (empty_frame.sum(axis=1)) + 1\r\n        empty_frame['Accumulation'] = empty_frame['Sum'].cumprod()\r\n        df = empty_frame.copy()\r\n        df = df.round(decimals=3)\r\n        df = df.fillna(0)\r\n        port_performance_drawdown = df.copy()\r\n        port_performance_drawdown = port_performance_drawdown.clip(upper=0)\r\n        port_performance_drawdown = port_performance_drawdown.drop(columns=['Sum', 'Accumulation'])\r\n        port_performance_drawdown['Sum'] = port_performance_drawdown.sum(axis=1)\r\n        port_performance_drawdown['Sum'] = port_performance_drawdown['Sum'] + 1\r\n        port_performance_drawdown['Accumulation'] = port_performance_drawdown['Sum'].cumprod()\r\n        port_performance_drawdown = port_performance_drawdown.round(decimals=3)\r\n        df_drawdown = port_performance_drawdown\r\n\r\n        # Monthly prod\r\n        mon = []\r\n        for x in empty_frame.index:\r\n            mon.append(x.strftime(\"%Y-%m\"))\r\n        months = set(mon)\r\n        d = []\r\n        v = []\r\n        for x in months:\r\n            n = empty_frame.loc[x, 'Sum'].prod()\r\n            d.append(x)\r\n            v.append(n)\r\n        com_frame = pd.DataFrame(index=d, data=v)\r\n        com_frame = com_frame.sort_index()\r\n        com_frame.index = pd.to_datetime(com_frame.index)\r\n\r\n        com_frame\r\n        # Need only to plot com_frame\r\n\r\n        # Create figures in Express\r\n        fig1 = px.line(df, x=df.index, y=df[\"Accumulation\"], hover_data=df.columns[:-2])  # show all columns values excluding last 2\r\n        fig2 = px.line(df_drawdown, x=df_drawdown.index, y=df_drawdown[\"Accumulation\"], hover_data=df_drawdown.columns[:-2])  # show all columns values excluding last 2\r\n        # For as many traces that exist per Express figure, get the traces from each plot and store them in an array.\r\n        # This is essentially breaking down the Express fig1 into it's traces\r\n        figure1_traces = []\r\n        figure2_traces = []\r\n        for trace in range(len(fig1[\"data\"])):\r\n            figure1_traces.append(fig1[\"data\"][trace])\r\n        for trace in range(len(fig2[\"data\"])):\r\n            figure2_traces.append(fig2[\"data\"][trace])\r\n        # Create a 1x2 subplot\r\n        this_figure = sp.make_subplots(rows=2, cols=1)\r\n        for traces in figure1_traces:\r\n            this_figure.append_trace(traces, row=1, col=1)\r\n        for traces in figure2_traces:\r\n            this_figure.append_trace(traces, row=2, col=1)\r\n        this_figure.update_layout(hovermode='x')\r\n        this_figure.show()\r\n\r\n    def puzzle_statistic(self, dic):\r\n        names = dic.keys()\r\n        empty_frame = pd.DataFrame()\r\n        for x in names:\r\n            q1 = dic[x][dic[x].columns[:-2]]\r\n            empty_frame = empty_frame.append(q1)\r\n\r\n        empty_frame = empty_frame.sort_index(ascending=True)\r\n        empty_frame['Sum'] = (empty_frame.sum(axis=1)) + 1\r\n        empty_frame['Accumulation'] = empty_frame['Sum'].cumprod()\r\n        pdr = empty_frame['Sum'] - 1\r\n        port_mean = pdr.mean()\r\n        port_mean_pct = port_mean * 100\r\n        port_std = pdr.std()\r\n        LPM_0 = len(pdr[pdr < 0]) / len(pdr)\r\n        LPM_1 = pdr.clip(upper=0).mean()\r\n        LPM_2 = pdr.clip(upper=0).std()\r\n        topless_pdr = pdr[pdr < port_std]\r\n        botless_prd = topless_pdr[topless_pdr > -port_std]\r\n        inner_mean = botless_prd.mean()\r\n        obj_only_stocks = empty_frame.drop(columns=['Sum', 'Accumulation'])\r\n        stocks_mean = obj_only_stocks.mean()\r\n        top_per = stocks_mean.nlargest(1)\r\n        worst_per = stocks_mean.nsmallest(1)\r\n        trade_length = len(pdr)\r\n        VaR_95 = -1.65 * port_std * np.sqrt(trade_length)\r\n        VaR_99 = -2.33 * port_std * np.sqrt(trade_length)\r\n        CVaR = LPM_1 / LPM_0\r\n        print(f'Portfolio daily average return is {round(port_mean, 2)}.')\r\n        print(f'Portfolio standard deviation is {round(port_std, 2)}.')\r\n        print(f'Daily average return for approximately 90% population is {round(inner_mean, 2)}.')\r\n        print(f'Downside daily probability is {round(LPM_0, 2)}.')\r\n        print(\r\n            f'There is 95% confidence that you will not lose more than {round(100 * VaR_95, 2)} % of your portfolio in a given {trade_length} period.')\r\n        print(\r\n            f'There is 99% confidence that you will not lose more than {round(100 * VaR_99, 2)} % of your portfolio in a given {trade_length} period.')\r\n        print(f'Expected loss that occur beyond the shortfall is {round(CVaR, 4)}.')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backt_code/test_file.py b/backt_code/test_file.py
--- a/backt_code/test_file.py	(revision b90b05d91fdf0ad5e9f75ba9dd66102333e42a92)
+++ b/backt_code/test_file.py	(date 1639133833265)
@@ -68,7 +68,8 @@
         initial_df = pd.DataFrame()
 
         for com, b_d, s_d in zip(df_1["company"], df_1["start day"], df_1["end day"]):
-            data = yf.download(com, start=backtest.date_plus_one(self, b_d), end=backtest.date_plus_one(self, s_d))
+            data = yf.download(com, start=backtest.date_plus_one(self, b_d), end=backtest.date_plus_one(self, s_d),
+                               progress=False)
             data["Ticker"] = com
             initial_df = pd.concat([initial_df, data])
         df_close = initial_df[["Ticker", "Adj Close"]]
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"4a972dd2-f9ba-434a-b3da-c613e4b723df\" name=\"Changes\" comment=\"06/12/21 Structured statistic + add formula for monthly income\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/backt_code/test_file.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/backt_code/test_file.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/backt_code/testing code.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/backt_code/testing code.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$PROJECT_DIR$/backt_code/main.py\" root0=\"SKIP_INSPECTION\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"216JL3HutqcMZ2a13WSjE3R9A1C\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.testing code\">\r\n    <configuration name=\"test_file\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"backt\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/backt_code\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/backt_code/test_file.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"testing code\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"backt\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/backt_code\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/backt_code/testing code.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"unit test\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"backt\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/backt_code\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/backt_code/unit test.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.testing code\" />\r\n        <item itemvalue=\"Python.test_file\" />\r\n        <item itemvalue=\"Python.unit test\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"4a972dd2-f9ba-434a-b3da-c613e4b723df\" name=\"Changes\" comment=\"\" />\r\n      <created>1637255548246</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1637255548246</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Zdorova\">\r\n      <created>1637257797400</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637257797400</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"19/11/21 Bolotik\">\r\n      <created>1637331114656</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637331114656</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"22/11/21 Illia: equal weights distribution + portfoliop erformance\">\r\n      <created>1637610800212</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637610800212</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"24/11/21 Weightings performed - fitted in one block only.\">\r\n      <created>1637751799239</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637751799239</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"26/11/21 Fixed close/open for 1st day relationship, shorten the code\">\r\n      <created>1637924470443</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637924470443</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"26/11/21 Fixed close/open for 1st day relationship, shorten the code.\">\r\n      <created>1637924586468</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1637924586468</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"28/11/21 Added general statistic + Var and CVaR.\">\r\n      <created>1638109040352</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1638109040352</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"28/11/21 Added general statistic + Var and CVaR.\">\r\n      <created>1638109081360</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1638109081361</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"30/11/21 Added sl tp signals + fixed weights\">\r\n      <created>1638267941432</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1638267941432</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"06/12/21 Added puzzle assembly\">\r\n      <created>1638818896438</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1638818896438</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"06/12/21 Structured statistic + add formula for monthly income\">\r\n      <created>1638976210322</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1638976210322</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"12\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"origin/second_branch\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Zdorova\" />\r\n    <MESSAGE value=\"19/11/21 Bolotik\" />\r\n    <MESSAGE value=\"22/11/21 Illia: equal weights distribution + portfoliop erformance\" />\r\n    <MESSAGE value=\"24/11/21 Weightings performed - fitted in one block only.\" />\r\n    <MESSAGE value=\"26/11/21 Fixed close/open for 1st day relationship, shorten the code\" />\r\n    <MESSAGE value=\"26/11/21 Fixed close/open for 1st day relationship, shorten the code.\" />\r\n    <MESSAGE value=\"28/11/21 Added general statistic + Var and CVaR.\" />\r\n    <MESSAGE value=\"30/11/21 Added sl tp signals + fixed weights\" />\r\n    <MESSAGE value=\"06/12/21 Added puzzle assembly\" />\r\n    <MESSAGE value=\"06/12/21 Structured statistic + add formula for monthly income\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"06/12/21 Structured statistic + add formula for monthly income\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <default-breakpoints>\r\n        <breakpoint type=\"python-exception\">\r\n          <properties notifyOnTerminate=\"true\" exception=\"BaseException\">\r\n            <option name=\"notifyOnTerminate\" value=\"true\" />\r\n          </properties>\r\n        </breakpoint>\r\n      </default-breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision b90b05d91fdf0ad5e9f75ba9dd66102333e42a92)
+++ b/.idea/workspace.xml	(date 1639229226910)
@@ -1,10 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="4a972dd2-f9ba-434a-b3da-c613e4b723df" name="Changes" comment="06/12/21 Structured statistic + add formula for monthly income">
+    <list default="true" id="4a972dd2-f9ba-434a-b3da-c613e4b723df" name="Changes" comment="10/12/21 Docstring added.">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/backt_code/test_file.py" beforeDir="false" afterPath="$PROJECT_DIR$/backt_code/test_file.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/backt_code/testing code.py" beforeDir="false" afterPath="$PROJECT_DIR$/backt_code/testing code.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -198,7 +197,14 @@
       <option name="project" value="LOCAL" />
       <updated>1638976210322</updated>
     </task>
-    <option name="localTasksCounter" value="12" />
+    <task id="LOCAL-00012" summary="10/12/21 Docstring added.">
+      <created>1639132964761</created>
+      <option name="number" value="00012" />
+      <option name="presentableId" value="LOCAL-00012" />
+      <option name="project" value="LOCAL" />
+      <updated>1639132964761</updated>
+    </task>
+    <option name="localTasksCounter" value="13" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -236,7 +242,8 @@
     <MESSAGE value="30/11/21 Added sl tp signals + fixed weights" />
     <MESSAGE value="06/12/21 Added puzzle assembly" />
     <MESSAGE value="06/12/21 Structured statistic + add formula for monthly income" />
-    <option name="LAST_COMMIT_MESSAGE" value="06/12/21 Structured statistic + add formula for monthly income" />
+    <MESSAGE value="10/12/21 Docstring added." />
+    <option name="LAST_COMMIT_MESSAGE" value="10/12/21 Docstring added." />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
